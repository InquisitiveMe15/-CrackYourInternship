//here two passes are required..time complextiy is O(2*n)...space complexity is O(1)
class Solution {
public:
    void sortColors(vector<int>& nums) {
        int count0 = 0;
        int count1 = 0;
        int count2 = 0;
        for(int i=0; i<nums.size(); i++){
            if(nums[i]==0){
                count0++;
            }
            else if(nums[i]==1){
                count1++;
            }
            else{
                count2++;
            }
        }
        for(int i=0; i<count0; i++){
            nums[i]=0;
        }
        for(int i=0; i<count1; i++){
            nums[i+count0]=1;
        }
        for(int i=0; i<count2; i++){
            nums[i+count1+count0]=2;
        }
    }
};


//using three pointers.....in-place and O(n) time complextiy
class Solution {
public:
    void sortColors(vector<int>& nums) {
        int low = 0;
        int mid = 0;
        int high = nums.size()-1;
        while(mid<=high){
            switch(nums[mid]){
                case 0:
                    swap(nums[mid],nums[low]);
                    mid++;
                    low++;
                    break;
                case 1:
                    mid++;
                    break;
                case 2:
                    swap(nums[mid],nums[high]);
                    high--;
                    break;
            }
        }
        
    }
};
