class Solution {
public:
    int maximumProduct(vector<int>& nums) {
        int n = nums.size();
        sort(nums.begin(),nums.end());
        int maximumP;
        maximumP = max(nums[0]*nums[1]*nums[n-1], nums[n-1]*nums[n-2]*nums[n-3]);
        return maximumP;
        
       
        
    }
};




OR




class Solution {
public:
    int maximumProduct(vector<int>& nums) {
        if(nums.size()==3){
            return (nums[0]*nums[1]*nums[2]);
        }
        vector<int> positive;
        vector<int> negative;
        for(int i=0; i<nums.size(); i++){
            if(nums[i]>=0){
                positive.push_back(nums[i]);
            }
            else{
                negative.push_back(nums[i]);
            }
        }
        int maximumP ;
        sort(positive.begin(), positive.end(), greater<int>());
        sort(negative.begin(), negative.end());
        int p = positive.size();
        int n = negative.size();
        // cout<<p<<" "<<n<<"\n";
        if(p==0){
            return negative[n-1]*negative[n-2]*negative[n-3];
        }
        else if(p==1 || p==2){
            maximumP = positive[0]*negative[0]*negative[1];
        }
        else if(p>=3){
            if(n<2){
                maximumP =  positive[0]*positive[1]*positive[2];
            }
            else{
                maximumP = max(positive[0]*positive[1]*positive[2],positive[0]*negative[0]*negative[1]);
            }
        }
        return maximumP;
        
    }
};
