class Solution {
public:
    int equalLess(int x, vector<int>& nums){
        int count = 0;
        for(int i=0; i<nums.size(); i++){
            if(nums[i]<=x){
                count++;
            }
        }
        return count;
    }
    
    int findDuplicate(vector<int>& nums) {
        
        
        long long n = nums.size();
        int low = 1;
        int high = n-1;
        int duplicate = 0;
        while(low<=high){
            int mid = (low+high)/2;
            if(equalLess(mid,nums)>mid){
                duplicate = mid;
                high = mid-1;
            }
            else{
                low = mid+1;
            }
        }
        return duplicate;
    }
};

//or by using linked list cycle..........most optimal one

class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int slow = nums[0];
        int fast = nums[0];
        do{
            slow = nums[slow];
            fast = nums[nums[fast]];
        }while(slow!=fast);
        fast = nums[0];
        while(slow!=fast){
            slow = nums[slow];
            fast = nums[fast];
        }
        return slow;
    }
};
