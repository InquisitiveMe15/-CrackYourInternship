//this solution uses a third linked list

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        ListNode* newList = new ListNode();
        ListNode* head = newList;
        while(list1 != nullptr && list2 != nullptr){
            if(list1->val<=list2->val){
                ListNode* temp = list1;
                list1=list1->next;
                newList->next = temp;
                temp->next = nullptr;
                newList = newList->next;
                // delete temp;
            }
            else{
                ListNode* temp = list2;
                list2=list2->next;
                newList->next = temp;
                temp->next = nullptr;
                newList = newList->next;
                // delete temp;
            }
        }
        if(list1==nullptr){
            newList->next = list2;
        }
        else{
            newList->next = list1;
        }
        return head->next;
    }
};
