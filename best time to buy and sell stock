//brute force...time complexity O(n^2)

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        int maxprofit = 0;
        for(int i=n-1; i>=0; i--){
            for(int j = i-1; j>=0; j--){
                maxprofit = max(maxprofit,prices[i]-prices[j]);
            }
        }
        return maxprofit;
    }
};

//optimal solution time complexity O(n)
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        int minimum = prices[0];
        int maxprofit = 0;
        for(int i=1; i<n; i++){
            if(prices[i]>= minimum){
                maxprofit = max(maxprofit,prices[i]-minimum);
            }
            else{
                minimum = prices[i];
            }
        }
        return maxprofit;
    }
};
